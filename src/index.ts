
import { App } from "@slack/bolt";
import { getAnswer } from "./api";
import { v4 as uuidv4 } from "uuid";
require('dotenv').config();

const app = new App({
  token: process.env.SLACKBOT_TOKEN, //Find in the Oauth  & Permissions tab
  signingSecret: process.env.SLACKBOT_SIGNING_SECRET , // Find in Basic Information Tab
  socketMode: true,
  appToken: process.env.SLACKBOT_APP_TOKEN, // Token from the App-level Token that we created
  port: parseInt(process.env.PORT) || 3000,
});

const STATES = {
  instanceId: uuidv4(),
  token: process.env.CHATGPT_AUTH_TOKEN,
  conversationId: undefined, // first time will be generated by server, then save it until reset
  parentId: undefined, // parent message id
};

(async () => {
  await app.start();
  console.log(`⚡️ ChatGPT-${STATES.instanceId} Bot App started`);
})();

const handle = async (question: string, say: Function) => {
  try {
    console.debug(`${STATES.instanceId} recv question '${question}'`);
    const {answer: result, conversationId, id} = await getAnswer(question, STATES.token, STATES.conversationId, STATES.parentId);
    STATES.conversationId = conversationId;
    STATES.parentId = id;
    console.log(`chatgpt-${STATES.instanceId}/${conversationId} Q: '${question}', A: ${result}`);
    say(result);
  } catch (error) {
    console.error(error);
    say(`hatgpt-${STATES.instanceId} error: \`${error.message}\``);
  }
}
app.message(/.*/, async ({context, say, payload }) => {
  return handle(context['matches'][0], say);
});
app.event("app_mention", async ({context, event, say}) => {
  const q = event.text.replace(`<@${context.botUserId}>`, '');
  return handle(q, say);
});
app.command("/chatgpt", async ({ command, ack, say }) => {
  await ack();
  return handle(command.text, say);
});
app.command("/reset-chatgpt-conversation", async ({ command, ack, say }) => {
  await ack();
  STATES.conversationId = undefined;
  STATES.parentId = undefined;
  say(`\`chatgpt-${STATES.instanceId}\` conversation reset done.`);
});
app.command("/print-chatgpt-token", async ({ command, ack, say }) => {
    try {
      await ack();
      say(`\`chatgpt-${STATES.instanceId}\` auth token using : \`${STATES.token || "<not setup>"}\``);
    } catch (error) {
      console.error(error);
      say(`\`chatgpt-${STATES.instanceId}\` auth token get error: ${error.message}`);
    }
});
app.command("/set-chatgpt-token", async ({ command, ack, say }) => {
    try {
      await ack();
      let txt:any = command.text; // The inputted parameters
      STATES.token = txt;
      say(`\`chatgpt-${STATES.instanceId}\` auth setup done, current value as :\`${txt}\``);
    } catch (error) {
      console.error(error);
      say(`\`chatgpt-${STATES.instanceId}\` auth setup fail, error: + \`${error.message}\``);
    }
});
